/*
 * iwOS
 *
 * API for iwOS food delivery & ticketing
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: info@iwos.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EventApiController : ControllerBase
    { 
        /// <summary>
        /// Get single event information
        /// </summary>
        /// <param name="body">Event identificator</param>
        /// <response code="200">Successful operation</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/franbolivar/iwos_ticketing/1.0/event")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetEvent")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EventOutput>), description: "Successful operation")]
        public virtual IActionResult GetEvent([FromBody]EventInput body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<EventOutput>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"assistants\" : [ {\n    \"uds\" : 2,\n    \"registered_uds\" : 1,\n    \"user\" : {\n      \"name\" : \"John Doe\",\n      \"email\" : \"john@doe.com\"\n    },\n    \"order\" : 1423\n  }, {\n    \"uds\" : 2,\n    \"registered_uds\" : 1,\n    \"user\" : {\n      \"name\" : \"John Doe\",\n      \"email\" : \"john@doe.com\"\n    },\n    \"order\" : 1423\n  } ],\n  \"product\" : {\n    \"date\" : \"2018-04-14 16:30\",\n    \"image\" : \"https://iwos.com/img/event/27.png\",\n    \"price\" : 25.5,\n    \"name\" : \"Pool Party\"\n  },\n  \"stock\" : 50\n}, {\n  \"assistants\" : [ {\n    \"uds\" : 2,\n    \"registered_uds\" : 1,\n    \"user\" : {\n      \"name\" : \"John Doe\",\n      \"email\" : \"john@doe.com\"\n    },\n    \"order\" : 1423\n  }, {\n    \"uds\" : 2,\n    \"registered_uds\" : 1,\n    \"user\" : {\n      \"name\" : \"John Doe\",\n      \"email\" : \"john@doe.com\"\n    },\n    \"order\" : 1423\n  } ],\n  \"product\" : {\n    \"date\" : \"2018-04-14 16:30\",\n    \"image\" : \"https://iwos.com/img/event/27.png\",\n    \"price\" : 25.5,\n    \"name\" : \"Pool Party\"\n  },\n  \"stock\" : 50\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<EventOutput>>(exampleJson)
                        : default(List<EventOutput>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get list of events
        /// </summary>
        /// <param name="body">Filtering options and output language</param>
        /// <response code="200">Successful operation</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/franbolivar/iwos_ticketing/1.0/events")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EventsOutput>), description: "Successful operation")]
        public virtual IActionResult GetEvents([FromBody]EventsInput body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<EventsOutput>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"next\" : [ null, null ],\n  \"current\" : [ {\n    \"date\" : \"2018-04-14 16:30\",\n    \"product_id\" : 27,\n    \"name\" : \"Pool Party\",\n    \"schedule_id\" : 1423\n  }, {\n    \"date\" : \"2018-04-14 16:30\",\n    \"product_id\" : 27,\n    \"name\" : \"Pool Party\",\n    \"schedule_id\" : 1423\n  } ],\n  \"previous\" : [ null, null ]\n}, {\n  \"next\" : [ null, null ],\n  \"current\" : [ {\n    \"date\" : \"2018-04-14 16:30\",\n    \"product_id\" : 27,\n    \"name\" : \"Pool Party\",\n    \"schedule_id\" : 1423\n  }, {\n    \"date\" : \"2018-04-14 16:30\",\n    \"product_id\" : 27,\n    \"name\" : \"Pool Party\",\n    \"schedule_id\" : 1423\n  } ],\n  \"previous\" : [ null, null ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<EventsOutput>>(exampleJson)
                        : default(List<EventsOutput>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
