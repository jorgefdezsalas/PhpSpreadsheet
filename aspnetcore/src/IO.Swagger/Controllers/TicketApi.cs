/*
 * iwOS
 *
 * API for iwOS food delivery & ticketing
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: info@iwos.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TicketApiController : ControllerBase
    { 
        /// <summary>
        /// Register tickets by data
        /// </summary>
        /// <param name="body">Ticket identificator</param>
        /// <response code="200">Succesful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unprocessable entity</response>
        [HttpPost]
        [Route("/franbolivar/iwos_ticketing/1.0/register_ticket_by_data")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RegisterTicketByData")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TicketOutput>), description: "Succesful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(List<TicketOutput>), description: "Invalid input")]
        public virtual IActionResult RegisterTicketByData([FromBody]TicketInputData body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TicketOutput>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(List<TicketOutput>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ticket\" : {\n    \"product\" : {\n      \"date\" : \"2018-04-14 16:30\",\n      \"image\" : \"https://iwos.com/img/event/27.png\",\n      \"price\" : 25.5,\n      \"name\" : \"Pool Party\"\n    },\n    \"uds\" : 2,\n    \"user\" : {\n      \"name\" : \"John Doe\",\n      \"email\" : \"john@doe.com\"\n    }\n  },\n  \"success\" : false,\n  \"error_code\" : 6,\n  \"message\" : \"already used ticket\"\n}, {\n  \"ticket\" : {\n    \"product\" : {\n      \"date\" : \"2018-04-14 16:30\",\n      \"image\" : \"https://iwos.com/img/event/27.png\",\n      \"price\" : 25.5,\n      \"name\" : \"Pool Party\"\n    },\n    \"uds\" : 2,\n    \"user\" : {\n      \"name\" : \"John Doe\",\n      \"email\" : \"john@doe.com\"\n    }\n  },\n  \"success\" : false,\n  \"error_code\" : 6,\n  \"message\" : \"already used ticket\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<TicketOutput>>(exampleJson)
                        : default(List<TicketOutput>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Register ticket by secret
        /// </summary>
        /// <param name="body">Ticket identificator</param>
        /// <response code="200">Succesful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unprocessable entity</response>
        [HttpPost]
        [Route("/franbolivar/iwos_ticketing/1.0/register_ticket_by_secret")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RegisterTicketBySecret")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TicketOutput>), description: "Succesful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(List<TicketOutput>), description: "Invalid input")]
        public virtual IActionResult RegisterTicketBySecret([FromBody]TicketInputSecret body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TicketOutput>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(List<TicketOutput>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ticket\" : {\n    \"product\" : {\n      \"date\" : \"2018-04-14 16:30\",\n      \"image\" : \"https://iwos.com/img/event/27.png\",\n      \"price\" : 25.5,\n      \"name\" : \"Pool Party\"\n    },\n    \"uds\" : 2,\n    \"user\" : {\n      \"name\" : \"John Doe\",\n      \"email\" : \"john@doe.com\"\n    }\n  },\n  \"success\" : false,\n  \"error_code\" : 6,\n  \"message\" : \"already used ticket\"\n}, {\n  \"ticket\" : {\n    \"product\" : {\n      \"date\" : \"2018-04-14 16:30\",\n      \"image\" : \"https://iwos.com/img/event/27.png\",\n      \"price\" : 25.5,\n      \"name\" : \"Pool Party\"\n    },\n    \"uds\" : 2,\n    \"user\" : {\n      \"name\" : \"John Doe\",\n      \"email\" : \"john@doe.com\"\n    }\n  },\n  \"success\" : false,\n  \"error_code\" : 6,\n  \"message\" : \"already used ticket\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<TicketOutput>>(exampleJson)
                        : default(List<TicketOutput>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
