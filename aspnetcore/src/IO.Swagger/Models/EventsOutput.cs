/*
 * iwOS
 *
 * API for iwOS food delivery & ticketing
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: info@iwos.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EventsOutput : IEquatable<EventsOutput>
    { 
        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [Required]
        [DataMember(Name="current")]
        public List<EventInfo> Current { get; set; }

        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [Required]
        [DataMember(Name="next")]
        public List<EventInfo> Next { get; set; }

        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [Required]
        [DataMember(Name="previous")]
        public List<EventInfo> Previous { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventsOutput {\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EventsOutput)obj);
        }

        /// <summary>
        /// Returns true if EventsOutput instances are equal
        /// </summary>
        /// <param name="other">Instance of EventsOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventsOutput other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Current == other.Current ||
                    Current != null &&
                    Current.SequenceEqual(other.Current)
                ) && 
                (
                    Next == other.Next ||
                    Next != null &&
                    Next.SequenceEqual(other.Next)
                ) && 
                (
                    Previous == other.Previous ||
                    Previous != null &&
                    Previous.SequenceEqual(other.Previous)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Current != null)
                    hashCode = hashCode * 59 + Current.GetHashCode();
                    if (Next != null)
                    hashCode = hashCode * 59 + Next.GetHashCode();
                    if (Previous != null)
                    hashCode = hashCode * 59 + Previous.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EventsOutput left, EventsOutput right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EventsOutput left, EventsOutput right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
